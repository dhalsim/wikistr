diff --git a/node_modules/svelte-markdown/src/Parser.svelte b/node_modules/svelte-markdown/src/Parser.svelte
index 7a90b9d..c9add15 100644
--- a/node_modules/svelte-markdown/src/Parser.svelte
+++ b/node_modules/svelte-markdown/src/Parser.svelte
@@ -6,6 +6,7 @@
   export let header = undefined
   export let rows = undefined
   export let ordered = false
+  export let extra
   export let renderers
 
   supressWarnings();
@@ -13,35 +14,37 @@
 
 {#if !type}
   {#each tokens as token}
-    <svelte:self {...token} {renderers} />
+    <svelte:self {...token} {renderers} {extra} />
   {/each}
 {:else}
   {#if renderers[type]}
     {#if type === 'table'}
-      <svelte:component this={renderers.table}>
-        <svelte:component this={renderers.tablehead}>
-          <svelte:component this={renderers.tablerow}>
+      <svelte:component this={renderers.table} {extra}>
+        <svelte:component this={renderers.tablehead} {extra}>
+          <svelte:component this={renderers.tablerow} {extra}>
             {#each header as headerItem, i}
               <svelte:component
                 this={renderers.tablecell}
                 header={true}
                 align={$$restProps.align[i] || 'center'}
+                {extra}
                 >
-                <svelte:self tokens={headerItem.tokens} {renderers} />
+                <svelte:self tokens={headerItem.tokens} {renderers} {extra} />
               </svelte:component>
             {/each}
           </svelte:component>
         </svelte:component>
-        <svelte:component this={renderers.tablebody}>
+        <svelte:component this={renderers.tablebody} {extra}>
           {#each rows as row}
-            <svelte:component this={renderers.tablerow}>
+            <svelte:component this={renderers.tablerow} {extra}>
               {#each row as cells, i}
                 <svelte:component
                   this={renderers.tablecell}
                   header={false}
                   align={$$restProps.align[i] || 'center'}
+                  {extra}
                   >
-                  <svelte:self tokens={cells.tokens} {renderers} />
+                  <svelte:self tokens={cells.tokens} {renderers} {extra} />
                 </svelte:component>
               {/each}
             </svelte:component>
@@ -50,26 +53,26 @@
       </svelte:component>
     {:else if type === 'list'}
       {#if ordered}
-        <svelte:component this={renderers.list} {ordered} {...$$restProps}>
+        <svelte:component this={renderers.list} {ordered} {extra} {...$$restProps}>
           {#each $$restProps.items as item}
-            <svelte:component this={renderers.orderedlistitem || renderers.listitem} {...item}>
-              <svelte:self tokens={item.tokens} {renderers} />
+            <svelte:component this={renderers.orderedlistitem || renderers.listitem} {...item} {extra}>
+              <svelte:self tokens={item.tokens} {renderers} {extra} />
             </svelte:component>
           {/each}
         </svelte:component>
       {:else}
-        <svelte:component this={renderers.list} {ordered} {...$$restProps}>
+        <svelte:component this={renderers.list} {ordered} {extra} {...$$restProps}>
           {#each $$restProps.items as item}
-            <svelte:component this={renderers.unorderedlistitem || renderers.listitem} {...item}>
-              <svelte:self tokens={item.tokens} {renderers} />
+            <svelte:component this={renderers.unorderedlistitem || renderers.listitem} {...item} {extra}>
+              <svelte:self tokens={item.tokens} {renderers} {extra} />
             </svelte:component>
           {/each}
         </svelte:component>
       {/if}
     {:else}
-      <svelte:component this={renderers[type]} {...$$restProps}>
+      <svelte:component this={renderers[type]} {...$$restProps} {extra}>
         {#if tokens}
-          <svelte:self {tokens} {renderers} />
+          <svelte:self {tokens} {renderers} {extra} />
         {:else}
           {$$restProps.raw}
         {/if}
diff --git a/node_modules/svelte-markdown/src/SvelteMarkdown.svelte b/node_modules/svelte-markdown/src/SvelteMarkdown.svelte
index 845f690..dce19cd 100644
--- a/node_modules/svelte-markdown/src/SvelteMarkdown.svelte
+++ b/node_modules/svelte-markdown/src/SvelteMarkdown.svelte
@@ -1,13 +1,14 @@
 <script>
-  import { setContext, createEventDispatcher, onMount } from 'svelte'
-  import Parser from './Parser.svelte'
-  import { Lexer, Slugger, defaultOptions, defaultRenderers } from './markdown-parser'
-  import { key } from './context'
+  import { setContext, createEventDispatcher, onMount } from 'svelte';
+  import Parser from './Parser.svelte';
+  import { Lexer, Slugger, defaultOptions, defaultRenderers } from './markdown-parser';
+  import { key } from './context';
 
-  export let source = []
-  export let renderers = {}
-  export let options = {}
-  export let isInline = false
+  export let source = [];
+  export let renderers = {};
+  export let options = {};
+  export let isInline = false;
+  export let extra;
 
   const dispatch = createEventDispatcher();
 
@@ -15,30 +16,30 @@
   let lexer;
   let mounted;
 
-  $: preprocessed = Array.isArray(source)
-  $: slugger = source ? new Slugger : undefined
-  $: combinedOptions = { ...defaultOptions, ...options }
+  $: preprocessed = Array.isArray(source);
+  $: slugger = source ? new Slugger() : undefined;
+  $: combinedOptions = { ...defaultOptions, ...options };
   $: if (preprocessed) {
-    tokens = source
+    tokens = source;
   } else {
-    lexer = new Lexer(combinedOptions)
+    lexer = new Lexer(combinedOptions);
 
-    tokens = isInline ? lexer.inlineTokens(source) : lexer.lex(source)
+    tokens = isInline ? lexer.inlineTokens(source) : lexer.lex(source);
 
-    dispatch('parsed', { tokens })
+    dispatch('parsed', { tokens });
   }
 
-  $: combinedRenderers = { ...defaultRenderers, ...renderers }
+  $: combinedRenderers = { ...defaultRenderers, ...renderers };
 
   setContext(key, {
-    slug: (val) => slugger ? slugger.slug(val) : '',
+    slug: (val) => (slugger ? slugger.slug(val) : ''),
     getOptions: () => combinedOptions
-  })
-  $: mounted && !preprocessed && dispatch('parsed', { tokens })
+  });
+  $: mounted && !preprocessed && dispatch('parsed', { tokens });
 
   onMount(() => {
-    mounted = true
+    mounted = true;
   });
 </script>
 
-<Parser {tokens} renderers={combinedRenderers} />
+<Parser {tokens} renderers={combinedRenderers} {extra} />
diff --git a/node_modules/svelte-markdown/types/index.d.ts b/node_modules/svelte-markdown/types/index.d.ts
index f6550b8..a925ae9 100644
--- a/node_modules/svelte-markdown/types/index.d.ts
+++ b/node_modules/svelte-markdown/types/index.d.ts
@@ -80,6 +80,11 @@ type Props = {
    * To use [inline markdown](https://marked.js.org/using_advanced#inline), you can assign the prop `isInline` to the component.
    */
   isInline?: boolean
+
+  /**
+   * A passthru parameter for when you need the outer component to handle something to one of the custom renderers.
+   */
+  extra?: any
 }
 export default class SvelteMarkdown extends SvelteComponentTyped<
   Props,
